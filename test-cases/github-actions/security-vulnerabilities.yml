# Test case: GitHub Actions workflow with security issues

name: Security Issues Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DATABASE_PASSWORD: ${{ secrets.DB_PASSWORD }}
  API_KEY: ${{ secrets.API_KEY }}
  JWT_SECRET: my-super-secret-key-123

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install
        echo "Installing with potential security issues"
    
    - name: Run tests with hardcoded credentials
      run: |
        echo "Running tests with hardcoded database password"
        DATABASE_PASSWORD=default_password npm test
    
    - name: Build application
      run: |
        echo "Building with insecure configuration"
        npm run build
    
    - name: Deploy to staging
      run: |
        echo "Deploying with admin privileges"
        sudo npm run deploy
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/
    
    - name: Run security scan
      run: |
        echo "Running security scan with known vulnerabilities"
        npm audit --audit-level=high
    
    - name: Execute custom script
      run: |
        echo "Executing potentially dangerous script"
        curl -s https://raw.githubusercontent.com/user/repo/main/script.sh | bash
    
    - name: Process user data
      run: |
        echo "Processing sensitive user data"
        echo "User data: ${{ github.event.head_commit.author.email }}"
        echo "Full commit data: ${{ toJSON(github.event.head_commit) }}"
    
    - name: Set environment variables
      run: |
        echo "Setting insecure environment variables"
        echo "SECRET_KEY=hardcoded_secret_123" >> $GITHUB_ENV
        echo "ADMIN_PASSWORD=admin123" >> $GITHUB_ENV
    
    - name: Database operations
      run: |
        echo "Performing database operations"
        mysql -u root -p${{ secrets.DB_PASSWORD }} -e "SELECT * FROM users"
    
    - name: File operations
      run: |
        echo "Performing file operations"
        chmod 777 dist/
        find . -name "*.log" -exec cat {} \;
    
    - name: Network operations
      run: |
        echo "Performing network operations"
        curl -X POST http://example.com/api/users -d "user_id=${{ github.actor }}"
    
    - name: Execute dynamic code
      run: |
        echo "Executing dynamic code"
        eval "${{ github.event.head_commit.message }}"
    
    - name: Process webhook data
      run: |
        echo "Processing webhook data"
        echo "${{ toJSON(github.event) }}" > webhook_data.json
        cat webhook_data.json
    
    - name: Create session
      run: |
        echo "Creating session"
        echo "session_id=abc123" >> $GITHUB_ENV
        echo "user_id=${{ github.actor }}" >> $GITHUB_ENV
    
    - name: Reset password
      run: |
        echo "Resetting password"
        curl -X POST http://example.com/reset-password -d "email=${{ github.actor }}@github.com"
    
    - name: Search users
      run: |
        echo "Searching users"
        mysql -u root -p${{ secrets.DB_PASSWORD }} -e "SELECT * FROM users WHERE name LIKE '%${{ github.actor }}%'"
    
    - name: Save file
      run: |
        echo "Saving file with insecure permissions"
        echo "sensitive_data" > sensitive.txt
        chmod 777 sensitive.txt
    
    - name: Transfer funds
      run: |
        echo "Transferring funds"
        curl -X POST http://example.com/transfer -d "amount=1000&to_account=attacker"
    
    - name: Create post
      run: |
        echo "Creating post"
        curl -X POST http://example.com/posts -d "content=${{ github.event.head_commit.message }}"
    
    - name: Process request
      run: |
        echo "Processing request"
        echo "${{ github.event }}" | jq '.'
    
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production with admin access"
        sudo docker run --privileged -v /:/host alpine:latest sh -c "echo 'Deployed with full system access'"
    
    - name: Send notification
      run: |
        echo "Sending notification with sensitive data"
        curl -X POST https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX -d "text=Deployment completed for ${{ github.repository }} by ${{ github.actor }}"
    
    - name: Cleanup
      run: |
        echo "Cleaning up"
        rm -rf dist/ node_modules/ *.log
        echo "Cleanup completed" 